print(gg8)
p2b<-ggplot(junggu2015,aes(x=월,y=발생건수))
p2b<-p2b+geom_line()
print(gg4)
print(gg6)
p2b<-p2b+geom_point()
p2b<-p2b+ggtitle('2015년 중구 월별 교통사고 발생 현황')
p2b<-p2b+scale_x_continuous(breaks=1:12)
#p2b<-p2b+theme(panel.background = element_blank())
p2b<-p2b+theme(panel.background =
element_rect(colour = 'grey'),
plot.title=element_text(hjust=0.5))
print(p2b)
#막대그래프 : geom_bar
head(mtcars)
#차량별 실린더수 현황 히스토그램
gg9<-ggplot(mtcars,aes(cyl))
gg9<-geom_bar()
print(gg9)
fcyl<-factor(mtcars$cyl)
#cyl은 num타입 - factor 형으로 변환
gg9b<-ggplot(mtcars,aes(fcyl))
gg9b<-gg9b+geom_bar(
aes(fill=fcyl),width=0.5)
print(gg9b)
#누적 막대 그래프
fgear<-factor(mtcars$gear)
str(mtcars)     #factor 요소 확인
gg9c<-gg9c+geom_bar(aes(fill=fcyl),width=0.5)
gg9c<-gg9c+geom_bar(aes(fill=fgear),width=0.5)
print(gg9c)
#수평 누적 막대 그래프
gg9d<-ggplot(mtcars, aes(fcyl))
gg9d<-gg9d+geom_bar(aes(fill=fgear),width=0.5)
gg9d<-gg9d+coord_flip()
print(gg9d)
#일반적인 막대그래프
#실린더 수에 따른 연비 그래프
#stat='identity'는 y축값을 mpg값 그대로 사용하라는 의미
gg10<-ggplot(mtcars,aes(fcyl,mpg))
gg9d<-gg9d+geom_bar(aes(fill=fcyl),width=0.5)
print(gg10)
#p4<-p4+geom_bar(aes(fill=월),stat='identity')
#p4<-p4+geom_bar(fill='red',stat='identity')
p4<-p4+geom_bar(fill=월,stat='identity')
#2015년 12월 서울 각 자치구역 별
#교통사고 현황(자치구별/발생건수)을
#막대그래프 geom_bar로 작성
head(accid_2015_12)
print(p4)
accid_2015_12 <-subset(accid_2015,연도==2015&월==12)
accid_2015_12
#p5<-p5+geom_bar(stat='identity')
#p5<-p5+geom_bar(aes(fill=자치구명) ,stat='identity')
#p5<-p5+geom_bar(fill=rainbow(25) ,stat='identity')
p5<-p5+geom_bar(aes(fill=자치구명),stat='identity')
p5<-p5+theme(axis.text.x = element_text(angle=90, hjust=1))
p6<-ggplot(accid_2015_12,aes(x=자치구명,y=부상자수))
p6<-p6+geom_bar(fill=rainbow(25) ,stat='identity')
p4<-ggplot(junggu2015,aes(x=월,y=발생건수))
print(p6)
p7<-ggplot(accid_2015_12,aes(x=자치구명,y=사망자수))
p7<-p7+geom_bar(fill=rainbow(25) ,stat='identity')
print(p7)
#원 그래프: geom_bar + coord_polar()
print(gg9)
gg9<-gg9+coord_flip()   #수평막대
print(gg9)
gg9b<-gg9b+coord_polar()   #원그래프
print(gg9b)
#일반적인 파이 그래프
gg10 <-ggplot(mtcars,aes(factor(1),fill=fcyl))
print(p5)
gg10<-gg10+geom_bar(width=1)
gg10<-gg10+coord_polar(theta='y')
print(gg10)
p5<-ggplot(accid_2015_12,aes(x=자치구명,y=발생건수))
p2b<-p2b+xlim(1,13)+ylim(0,150)   #x,y 상하한값
gg10<-gg10+geom_bar(
aes(fill=fcyl), stat='identity')
gg9c<-ggplot(mtcars,aes(fcyl))
#
df<-data.frame(
group = c('Male','Female','Child'),
age = c(25,27,5))
head(df)
bc<-ggplot(df,aes('',age,fill=group))
bc<-bc+geom_bar(stat='identity')
bc<-bc+coord_polar(theta='y')    #임의의 각도 사용
print(bc)
#heat map:heatmap()
#데이터가 행렬 객체를 사용함
accid_2015_12 #문자와 숫자가 같이 있음
row.names(accid_2015_12)<-accid_2015_12$자치구명
#accid_2015_12의 각 행의 이름을 지정
mtx_acc_2015_12<-accid_2015_12[,c(4:6)]
#ccid_2015_12에서 발생건수, 사망자수,부상자수 추출
mtx_acc_2015_12<-data.matrix(mtx_acc_2015_12)
#발생건수,사망자수,부상자수 데이터를 행렬로 변환
mtx_acc_2015_12
#mtcars
head(mtcars)
mmtcars<-as.matrix(mtcars)
head(mtcars)
heatmap(mmtcars)      #기본 열그래프 작성
#유사성을 나타내기 위해 군집화 실행
heatmap(mmtcars, scale='column',
Colv=NA,Rowv=NA)   #군집화 제거
heatmap(mmtcars, scale='column',
Colv=NA,Rowv=NA, col=rainbow(256))  #색상지정1
heatmap(mmtcars, scale='column',
Colv=NA,Rowv=NA, col=terrain.colors(256))  #색상지정2
#버블차트
#2015년 12월 서울 각 자치구 별
#교통사고 현황(발생건수/사망자수)을 출력
gg11<-ggplot(accid_2015_12,aes(발생건수,사망자수))
#gg11<-gg11+scale_fill_brewer(palette='Set1')
gg11<-gg11+scale_fill_brewer(palette='Paired')
print(gg11)
#scale_fill_brewer에서 지원하는 색상 팔레트 조회
RColorBrewer::display.brewer.all()
heatmap(mtx_acc_2015_12,col=cm.colors(128),
Rowv=NA, Colv=NA, scale='column',
cexCol=1,margin=c(5,5))
heatmap(mmtcars, scale='column')  #정규화 작업후 다시그림
g11<-gg11+geom_point(aes(size=사망자수),
shape=16,color='blue',alpha=0.45)
#버블차트
#2015년 12월 서울 각 자치구 별
#교통사고 현황(발생건수/사망자수)을 출력
gg11<-ggplot(accid_2015_12,aes(발생건수,사망자수))
g11<-gg11+geom_point(aes(size=사망자수),
shape=16,color='blue',alpha=0.45)
#gg11<-gg11+scale_fill_brewer(palette='Set1')
gg11<-gg11+scale_fill_brewer(palette='Paired')
print(gg11)
#scale_fill_brewer에서 지원하는 색상 팔레트 조회
RColorBrewer::display.brewer.all()
print(gg11)
#gg11<-gg11+scale_fill_brewer(palette='Set1')
gg11<-gg11+scale_fill_brewer(palette='Paired')
print(gg11)
#버블차트
#2015년 12월 서울 각 자치구 별
#교통사고 현황(발생건수/사망자수)을 출력
gg11<-ggplot(accid_2015_12,aes(발생건수,사망자수))
g11<-gg11+geom_point(aes(size=사망자수),
shape=16,color='blue',alpha=0.45)
#gg11<-gg11+scale_fill_brewer(palette='Set1')
gg11<-gg11+scale_fill_brewer(palette='Paired')
print(gg11)
gg11<-gg11+geom_point(aes(size=사망자수),
shape=16,color='blue',alpha=0.45)
#gg11<-gg11+scale_fill_brewer(palette='Set1')
gg11<-gg11+scale_fill_brewer(palette='Paired')
print(gg11)
#scale_fill_brewer에서 지원하는 색상 팔레트 조회
RColorBrewer::display.brewer.all()
gg11<-gg11+geom_point(aes(size=사망자수),
shape=16,color='blue',alpha=0.45)
#gg11<-gg11+scale_fill_brewer(palette='Set1')
gg11<-gg11+scale_fill_brewer(palette='Paired')
print(gg11)
p4<-ggplot(junggu2015,aes(x=월,y=발생건수))
#p4<-p4+geom_bar(aes(fill=월),stat='identity')
#p4<-p4+geom_bar(fill='red',stat='identity')
p4<-p4+geom_bar(fill=월,stat='identity')
#버블차트
#2015년 12월 서울 각 자치구 별
#교통사고 현황(발생건수/사망자수)을 출력
gg11<-ggplot(accid_2015_12,aes(발생건수,사망자수))
gg11<-gg11+geom_point(aes(size=사망자수),
shape=16,color='blue',alpha=0.45)
#gg11<-gg11+scale_fill_brewer(palette='Set1')
gg11<-gg11+scale_fill_brewer(palette='Paired')
print(gg11)
#scale_fill_brewer에서 지원하는 색상 팔레트 조회
RColorBrewer::display.brewer.all()
ggplot(Cars93, aes(Weight,MPG.highway))+
#geom_point(shape=21,size=6) #기본
geom_point(aes(size=MPG.highway),shape=21) #사이즈 지정
#Cars93 데이터 이용-도시,고속도로별 연비
library(MASS)
head(Cars93)
ggplot(Cars93, aes(Weight,MPG.highway))+
#geom_point(shape=21,size=6) #기본
geom_point(aes(size=MPG.highway),shape=21) #사이즈 지정
#geom_point(shape=21,size=6) #기본
#geom_point(aes(size=MPG.highway),shape=21) #사이즈 지정
geom_point(aes(size=MPG.highway),shape=21,
ggplot(Cars93, aes(Weight,MPG.highway))+
#geom_point(shape=21,size=6) #기본
#geom_point(aes(size=MPG.highway),shape=21) #사이즈 지정
geom_point(aes(size=MPG.highway),shape=21,
colour='red') #색상지정
head(Cars93)
ggplot(Cars93, aes(Weight,MPG.highway))+
#geom_point(shape=21,size=6) #기본
#geom_point(aes(size=MPG.highway),shape=21) #사이즈 지정
geom_point(aes(size=MPG.highway),shape=21,
colour='red') #색상지정
ggplot(Cars93, aes(Weight,MPG.highway))+
#geom_point(shape=21,size=6) #기본
#geom_point(aes(size=MPG.highway),shape=21) #사이즈 지정
#geom_point(aes(size=MPG.highway),shape=21,
#           colour='red') #색상지정
geom_point(aes(size=MPG.highway),shape=21,
fill='red')  #내부채우기
ggplot(Cars93,aes(Weight, MPG.highway,fill=Price))+
#연속형 변수값에 따라 색깔 변화
geom_point(size=5, shape=21, col='red')
#ggplot(Cars93,aes(Weight, MPG.highway,fill=Price))+
#연속형 변수값에 따라 색깔 변화
ggplot(Cars93,aes(Weight, MPG.highway,fill=Cylinders))+
geom_point(size=5, shape=21, col='red')
#ggplot(Cars93,aes(Weight, MPG.highway,fill=Price))+
#연속형 변수값에 따른 색깔 변화
ggplot(Cars93,aes(Weight, MPG.highway,fill=Cylinders))+
#범주형 변수Cylinders에 따른 색깔 변화
geom_point(size=5, shape=21, col='red')
#ggplot(Cars93,aes(Weight, MPG.highway,fill=Price))+
#연속형 변수값에 따른 색깔 변화
ggplot(Cars93,aes(Weight, MPG.highway,fill=Cylinders))+
#범주형 변수Cylinders에 따른 색깔 변화
geom_point(size=5, shape=21, col='red')+
scale_fill_brewer(palette='Oranges')
#색깔 지정을 미리 정의된 팔레트 이용
#scale_fill_brewer(palette='Set1')
scale_fill_brewer(palette='Paired')
#ggplot(Cars93,aes(Weight, MPG.highway,fill=Price))+
#연속형 변수값에 따른 색깔 변화
ggplot(Cars93,aes(Weight, MPG.highway,fill=Cylinders))+
#범주형 변수Cylinders에 따른 색깔 변화
geom_point(size=5, shape=21, col='red')+
#scale_fill_brewer(palette='Oranges')
#색깔 지정을 미리 정의된 팔레트 이용
#scale_fill_brewer(palette='Set1')
scale_fill_brewer(palette='Paired')
#공간지도 - 지도에 통계관련 자료를 표시
head(accid_2015)
install.packages('ggmap')
library(ggmap)
install.packages('maps')
install.packages("maps")
install.packages('maps')
library(maps)
install.packages('maps')
library(maps)
install.packages('mapproj')
library(mapproj)
library(maps)
library(mapproj)
seoulmp<-get_googlemap('seoul')
library(maps)
library(mapproj)
install.packages('maps')
install.packages("maps")
library(maps)
install.packages('mapproj')
library(mapproj)
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap')
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap')
seoul<-ggamap(seoulmp)
print(seoul)
seoulmp<-get_googlemap('seoul',maptype='hybrid')
seoul<-ggamap(seoulmp)
print(seoul)
install.packages('ggmap')
library(ggmap)
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap')
seoulmp<-get_googlemap('seoul',maptype='hybrid')
seoul<-ggamap(seoulmp)
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap')
seoul<-ggmap(seoulmp)
print(seoul)
seoulmp<-get_googlemap('seoul',maptype='hybrid')
seoul<-ggmap(seoulmp)
print(seoul)
seoulmp<-get_googlemap('seoul',maptype='terrain')
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap')
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=1)
#seoulmp<-get_googlemap('seoul',maptype='hybrid')
#seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=1)
#seoulmp<-get_googlemap('seoul',maptype='hybrid')
#seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
#공간지도 - 지도에 통계관련 자료를 표시
head(accid_2015)
#car_accid_2016.txt
#car_accid_2005_2016.txt
accid_2015<-read.csv('c:/JAVA/seoul_car_acci_v1.txt',sep=',')
accid_2016<-read.csv('c:/JAVA/car_accid_2016.txt',sep='\t')
accid_2005_2016 <-read.csv('c:/JAVA/car_accid_2005_2016.txt',sep='\t',fileEncoding = 'euc-kr')
#공간지도 - 지도에 통계관련 자료를 표시
head(accid_2015)
install.packages('ggmap')
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=1)
install.packages('ggmap')
install.packages("ggmap")
library(ggmap)
install.packages('maps')
install.packages("maps")
library(maps)
install.packages('mapproj')
library(mapproj)
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=1)
#seoulmp<-get_googlemap('seoul',maptype='hybrid')
#seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
seoulmp<-get_googlemap('seoul',maptype='hybrid')
seoulmp<-get_googlemap('seoul',maptype='terrain')
#seoulmp<-get_googlemap('seoul')
seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul')
seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=1)
seoulmp<-get_googlemap('seoul',maptype='hybrid')
seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
library(ggmap)
library(maps)
install.packages('mapproj')
library(mapproj)
seoulmp<-get_googlemap('seoul')
seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=1)
seoulmp<-get_googlemap('seoul',maptype='hybrid')
seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
library(ggmap)
library(maps)
library(mapproj)
seoulmp<-get_googlemap('seoul')
seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=1)
seoulmp<-get_googlemap('seoul',maptype='hybrid')
seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
seoulmp<-get_googlemap('seoul',maptype='satellite')
seoul<-ggmap(seoulmp)
print(seoul)
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=1)
seoul<-ggmap(seoulmp)
print(seoul)
seoulmp<-get_googlemap('seoul',maptype='hybrid')
seoul<-ggmap(seoulmp)
print(seoul)
seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=1)
#seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
#seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=30)
#seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=15)
#seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=10)
#seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
#seoulmp<-get_googlemap('seoul',maptype='hybrid')
#seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
head(accid_2015)
#car_accid_2016.txt
#car_accid_2005_2016.txt
accid_2015<-read.csv('c:/JAVA/seoul_car_acci_v1.txt',sep=',')
head(accid_2015)
seoul_lat_lon<-read.csv('c:/JAVA/seoul_lat_lon.txt')
head(seoul_lat_lon)
head(accid_2015_12)
accid_2015_12 <-subset(accid_2015,연도==2015&월==12)
accid_2015_12
head(accid_2015_12)
seoul_lat_lon<-read.csv('c:/JAVA/seoul_lat_lon.txt')
head(seoul_lat_lon)
#맵에 자치구 위치를 점으로 표시
gmp<-ggmap(seoul)
gmp<-gmp+geom_point(accid_2015_12,aes(lon,lat))
print(gmp)
#맵에 자치구 위치를 점으로 표시
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
seoul<-ggmap(seoulmp)
gmp<-ggmap(seoul)
gmp<-gmp+geom_point(accid_2015_12,aes(lon,lat))
print(gmp)
#맵에 자치구 위치를 점으로 표시
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
gmp<-ggmap(seoul)
#맵에 자치구 위치를 점으로 표시
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
gmp<-ggmap(seoul)
gmp<-gmp+geom_point(accid_2015_12,aes(lon,lat))
#맵에 자치구 위치를 점으로 표시
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
gmp<-ggmap(seoulmap)
gmp<-gmp+geom_point(data=accid_2015_12,aes(lon,lat))
print(gmp)
gmp<-gmp+geom_point(data=accid_2015_12,aes(x=lon,y=lat,size=발생건수),
shape=17,color='blue',alpha=.5)
#맵에 자치구 위치를 점으로 표시
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
gmp<-ggmap(seoulmap)
gmp<-gmp+geom_point(data=accid_2015_12,aes(x=lon,y=lat,size=발생건수),
shape=17,color='blue',alpha=.5)
#gmp<-gmp+geom_path(
#  data=accid_2015_12,aes(x=lon, y=lat),
#  color='red',alpha=.5,lwd=1)
print(gmp)
#맵에 자치구 위치를 점으로 표시
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
gmp<-ggmap(seoulmap)
gmp<-gmp+geom_point(data=accid_2015_12,aes(x=lon,y=lat,size=발생건수),
shape=17,color='blue',alpha=.5)
#gmp<-gmp+geom_path(
#  data=accid_2015_12,aes(x=lon, y=lat),
#  color='red',alpha=.5,lwd=1)
print(gmp)
gmp<-gmp+geom_point(data=accid_2015_12,aes(x=lon,y=lat,size=발생건수),
shape=17,color='blue',alpha=.5)
gmp<-ggmap(seoulmap)
#맵에 자치구 위치를 점으로 표시
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
gmp<-ggmap(seoulmap)
#seoulmp<-get_googlemap('seoul')
#seoulmp<-get_googlemap('seoul',maptype='satellite')
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
#seoulmp<-get_googlemap('seoul',maptype='hybrid')
#seoulmp<-get_googlemap('seoul',maptype='terrain')
seoul<-ggmap(seoulmp)
print(seoul)
#맵에 자치구 위치를 점으로 표시
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
gmp<-ggmap(seoulmap)
#맵에 자치구 위치를 점으로 표시
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
gmp<-ggmap(seoulmap)
gmp<-ggmap(seoulmp)
gmp<-gmp+geom_point(data=accid_2015_12,aes(x=lon,y=lat,size=발생건수),
shape=17,color='blue',alpha=.5)
gmp<-gmp+geom_text(data=accid_2015_12,aes(label=자치구명),
size=3,hjust=1.2, fontface='bold')
#gmp<-gmp+geom_path(
#  data=accid_2015_12,aes(x=lon, y=lat),
#  color='red',alpha=.5,lwd=1)
print(gmp)
head(accid_2015_12)
#이름만 다르고 같은 행을 합쳐줌
accid_2015_12<-merge(accid_2015_12, seoul_lat_lon,
by.x='자치구명',by.y='area')
head(accid_2015_12)
#맵에 자치구 위치를 점으로 표시
seoulmp<-get_googlemap('seoul',maptype='roadmap',zoom=12)
gmp<-ggmap(seoulmp)
gmp<-gmp+geom_point(data=accid_2015_12,aes(x=lon,y=lat,size=발생건수),
shape=17,color='blue',alpha=.5)
gmp<-gmp+geom_text(data=accid_2015_12,aes(label=자치구명),
size=3,hjust=1.2, fontface='bold')
#gmp<-gmp+geom_path(
#  data=accid_2015_12,aes(x=lon, y=lat),
#  color='red',alpha=.5,lwd=1)
print(gmp)
